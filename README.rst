Python tvOS Template
====================

A template for building Python apps that will run under Apple tvOS.

**This repository branch contains a template for Python 3.4**.
Other Python versions are available by cloning other branches of repository.

The simplest way to use this template is with `Briefcase`_. However, you can 
use this template manually if you want.

Using this template
-------------------

1. Install `cookiecutter`_. This is a tool used to bootstrap complex project
   templates::

    $ pip install cookiecutter

2. Run ``cookiecutter`` on the Python-tvOS template::

    $ cookiecutter https://github.com/pybee/Python-tvOS-template --checkout 3.4

3. `Download the Python Apple support package for tvOS`_, and extract it. This
   will give you four frameworks.

   * ``BZip2.framework``

   * ``OpenSSL.framework``

   * ``XZ.framework``

   * ``Python.framework``

   Alternatively, you can download the `Python-Apple-support`_ project, and
   build your own versions of these frameworks.

   These framework directories should be placed in the same directory as
   the ``app`` and ``app_packages`` directories generated by the cookiecutter
   project template.

4. Add your code to the template. At the very minimum, you need to have an
   ``app/<project name>/app.py`` file that defines a ``PythonAppDelegate`` class.
   If your code has any dependencies, they should be installed under the 
   ``app_packages`` directory.


If you've done this correctly, a project called ``myproject`` should have a
directory structure that looks something like::

    iOS/
        app/
            myproject/
                __init__.py
                app.py
        app_packages/
            ...
        BZip2.framework/
            ...
        OpenSSL.framework/
            ...
        Python.framework/
            ...
        XZ.framework/
            ...
        myproject/
            ...
        My Project.xcodeproj/
            ...


You're now ready to open the XCode project file, build and run your project!

Next steps
----------

Of course, just running Python code isn't very interesting by itself - you'll
be able to output to the console, and see that output in XCode, but if you
tap the app icon on your phone, you won't see anything - because there isn't a
visible console on an iPhone.

To do something interesting, you'll need to work with the native tvOS system
libraries to draw widgets and respond to screen taps. The `Rubicon`_
Objective C bridging library can be used to enable an easy interface with the
tvOS system libraries. You could also use the `toga`_ library to provides a
cross-platform widget toolkit that supports tvOS.

Regardless of whether you use Toga, or you write an application natively, the
template project will try to instantiate a ``UIApplicationMain`` instance,
using a class named ``PythonAppDelegate`` as the App delegate. If a class of
that name can't be instantiated, the error raised will be logged, and the
Python interpreter will be shut down.

If you have any external library dependencies (like ``toga``, or anything other
third-party library), you should install the library code into the
``app_packages`` directory. This directory is the same as a  ``site_packages``
directory on a desktop Python install.

It's also worth noting that the ``app`` and ``app_packages`` code don't need
to contain the **actual** code. If it's more convenient to keep the code
somewhere else, you can symlink to the actual code inside the ``app`` or
``app_packages`` directory. At compile time, the symlink will be resolved and
copied to the app bundle, but during development, you can avoid having copies
of code in your source repositories.

One pattern for doing this is to have a top level project directory that
contains the source module, and an iOS directory at the same level that
links in the project source::

    myproject/
        tvOS/
           app/
               myproject -> ../../myproject
           ...
        myproject/
            __init__.py
            main.py
            other.py
        setup.py

.. _Briefcase: http://pybee.org/project/projects/tools/briefcase
.. _cookiecutter: https://github.com/audreyr/cookiecutter

.. _Download the Python Apple support package for tvOS: https://github.com/pybee/Python-Apple-support/releases/download/3.4-b1/Python-3.4-tvOS-support.b1.tar.gz
.. _Python-Apple-support: http://github.com/pybee/Python-Apple-support
.. _Rubicon: http://pybee.org/project/projects/bridges/rubicon
.. _toga: http://pybee.org/project/projects/libraries/toga